#+STARTUP: showall

* Contributing

* Bugs, Improvements and new Features

Go to [[https://github.com/{{{owner}}}/{{{repo}}}/issues][Issues]] and make a new issue.

Make sure to:

- Check that the issue has not already been reported.
- Check that the issue is not part of an active pull request.

* Pull Requests

Cool that you want to contribute your code :-)

Remember to:

- Include only one feature in a pull request.
- Open an issue and mention your planned pull request.
- The tests must pass (see [[#testing][Testing]]).
- Update [[README.org]] if needed.
- Update the documentation if needed (see [[#Documentation][Documentation]])
- Update [[CHANGELOG.org]].

** Testing

Uses [[https://github.com/alphapapa/makem.sh][makem.sh]] for linting and running
the tests. The tests are written with
[[https://github.com/jorgenschaefer/emacs-buttercup][buttercup]]. After pushing
a GitHub action is triggered to automatically lint and run tests. The outcome
can be seen on the
[[https://github.com/{{{owner}}}/{{{repo}}}/actions][Actions]] page.

*** Lint & run tests

To lint the package and run the tests locally from the command line you can use
the Makefile targets or call makem.sh directly. To run Emacs with an empty
configuration and not use your local emacs configuration it is best to use the
sandbox mechanism provided by makem.sh.

For convenience there are some additional make targets for linting and testing.
The main targets are (run in shell e.g. ~make sandbox-build~):

| ~sandbox-build~       | Creates the ~.sandbox~ directory and installs the dependencies and linters in the sandbox. |
| ~sandbox-clean~       | Removes the ~.sandbox~ directory.                                                          |
| ~sandbox-all~         | Run the tests and lint the package in the sandbox.                                         |
| ~sandbox-lint~        | Lint in the sandbox.                                                                       |
| ~sandbox-test~        | Run the tests in the sandbox.                                                              |
| ~sandbox-interactive~ | Load the packages in the sandbox and launch Emacs (GUI).                                   |

There are additional targets for linting:

| ~sandbox-lint-checkdoc~ | Run checkdoc. Checks for style errors.                         |
| ~sandbox-lint-compile~  | Byte-compile source files with warnings as errors.             |
| ~sandbox-lint-declare~  | Run check-declare.                                             |
| ~sandbox-lint-elsa~     | Run Elsa (not included in "lint" rule).                        |
| ~sandbox-lint-indent~   | Lint indentation.                                              |
| ~sandbox-lint-package~  | Run package-lint, a linting library for elisp package metadata |
| ~sandbox-lint-regexps~  | Relint scans elisp files for mistakes in regexps.              |

** Documentation

The documentation is automatically build and pushed to the =gh-pages= branch
with [[https://squidfunk.github.io/mkdocs-material/][mkdocs-material]] and a GitHub Action when the master branch is updated.

To preview the documentation locally install the dependencies:

#+BEGIN_SRC shell
  pip3 install mkdocs-material
  pip3 install mkdocs-minify-plugin
  pip3 install mkdocs-git-revision-date-localized-plugin
#+END_SRC

Then run a local server with ~mkdocs serve~ at http://localhost:8000/. The
documentation will be built and live reloading is started. Upon any changes the
documentation is automatically rebuilt and the page is reloaded.

The settings for the documentation can be found in [[mkdocs.yml]]. The files to
build the documentation are stored in the [[docs]] folder.

This documentation usually has more details than the short documentation in the
[[README.org]].

*** Taking Svg-Screenshots

If you have build Emacs with Cairo support (check variable
~system-configuration-features~) you can take vector screenshots of your Emacs
to use for the documentation. The Cairo flag is not on by default when building
from source.

#+BEGIN_SRC emacs-lisp
  (defun my-emacs-screenshot-svg ()
      "Save a screenshot of the current frame as an SVG image.
    Saves to a temp file and puts the filename in the kill ring."
      (interactive)
      (let* ((filename (make-temp-file "emacs-screenshot" nil ".svg"))
             (data (x-export-frames nil 'svg)))
        (with-temp-file filename
          (insert data))
        (kill-new filename)
        (message filename)))
#+END_SRC
