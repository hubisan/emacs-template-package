{"config":{"lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"{{{pgk-name}}} \u00b6 TODO Short description. Main Features \u00b6 TODO Describe main features. Extensions \u00b6 Remove section This section is only here to show the features you can use while writing the documentation with the extensions. Markdown extensions \u00b6 All available extensions are listed in the sitemap . This explains the enabled ones. Admonition \u00b6 You can use the following classes including synonyms: note, seealso abstract, summary, tldr info, todo tip, hint, important success, check, done question, help, faq warning, caution, attention failure, fail, missing danger, error bug example quote, cite !!! danger \"Don't try this at home\" ... Don\u2019t try this at home \u2026 Attr_list (HTML Attributes) \u00b6 Add html attributes to elements: This is a paragraph. {: #an_id .a_class } This is a paragraph. Def_list (Definition Lists) \u00b6 Apple : Pomaceous fruit of plants of the genus Malus in the family Rosaceae. Apple Pomaceous fruit of plants of the genus Malus in the family Rosaceae. Footnotes \u00b6 Footnotes[^1] have a label[^@#$%] and the footnote's content. [^1]: This is a footnote content. [^@#$%]: A footnote on the label: \"@#$%\". Footnotes 1 have a label 2 and the footnote\u2019s content. Meta \u00b6 Overwrite the page title with front matter at top: --- title: Lorem ipsum dolor sit amet --- Toc \u00b6 Is used to make a table of contents and to add permalinks to headings. Smartypants \u00b6 The SmartyPants extension converts ASCII dashes, quotes and ellipses to their HTML entity equivalents: ... \"test\" 'test' <<test>> \u2026 \u201ctest\u201d \u2018test\u2019 \u00abtest\u00bb PyMdown Extensions \u00b6 Showcase for enabled PyMdown extensions . Details \u00b6 Collapsible elements that hide their content. See #admonition for valid classes, it is actually the same just collapsible. ???+ note \"Open styled details\" ??? danger \"Nested details!\" And more content again. ??? success Content. ??? warning classes Content. Open styled details Nested details! And more content again. Success Content. Warning Content. Highlight \u00b6 Highlight is an extension that adds support for code highlighting. Inlinehilite \u00b6 Here is some code `#!py3 import pymdownx; pymdownx.__version__`. The mock shebang will be treated like text here: `#!js var test = 0;`. Here is some code import pymdownx ; pymdownx . __version__ . The mock shebang will be treated like text here: var test = 0 ; . Magiclink \u00b6 Makes it easy to set links and converts them: https://google.com fake.email@email.com test #1 backrefs#1 Python-Markdown/markdown#1 gitlab:pycqa/flake8#385 !13 backrefs!4 Python-Markdown/markdown!598 gitlab:pycqa/flake8!213 @facelessuser @twitter:twitter https://google.com fake.email@email.com test #1 backrefs#1 Python-Markdown/markdown#1 pycqa/flake8#385 !13 backrefs!4 Python-Markdown/markdown!598 pycqa/flake8!213 @facelessuser @twitter :twitter Saneheaders \u00b6 Used to make headers without a space not be headers: ##test Smartsymbols \u00b6 SmartSymbols adds syntax for creating special characters such as trademarks, arrows, fractions, etc. --> 1/4 (c) \u2192 \u00bc \u00a9 Snippets \u00b6 Lets you include other files. Superfences \u00b6 Allowing the nesting of fences under blockquotes, lists, or other block elements (see Limitations for more info). Ability to specify custom fences to provide features like flowcharts, sequence diagrams, or other custom blocks. Allow disabling of indented code blocks in favor of only using the fenced variant (off by default). > ``` a fenced block > with blank lines ``` ```{.python .extra-class linenums=\"1\"} import hello_world > ``` a fenced block > with blank lines ``` ```{.python .extra-class linenums=\"1\"} import hello_world Tabbed \u00b6 === \"Tab 1\" Markdown **content**. Multiple paragraphs. === \"Tab 2\" More Markdown **content**. - list item a - list item b Tab 1 echo $PATH Markdown content . Multiple paragraphs. Tab 2 More Markdown content . list item a list item b Tasklist \u00b6 - [X] item 1 * [X] item A * [ ] item B more text + [x] item a + [ ] item b + [x] item c * [X] item C - [ ] item 2 - [ ] item 3 item 1 item A item B more text item a item b item c item C item 2 item 3 This is a footnote content. \u21a9 A footnote on the label: \u201c@#$%\u201d. \u21a9","title":"Home"},{"location":"#pgk-name","text":"TODO Short description.","title":"{{{pgk-name}}}"},{"location":"#main-features","text":"TODO Describe main features.","title":"Main Features"},{"location":"#extensions","text":"Remove section This section is only here to show the features you can use while writing the documentation with the extensions.","title":"Extensions"},{"location":"#markdown-extensions","text":"All available extensions are listed in the sitemap . This explains the enabled ones.","title":"Markdown extensions"},{"location":"#admonition","text":"You can use the following classes including synonyms: note, seealso abstract, summary, tldr info, todo tip, hint, important success, check, done question, help, faq warning, caution, attention failure, fail, missing danger, error bug example quote, cite !!! danger \"Don't try this at home\" ... Don\u2019t try this at home \u2026","title":"Admonition"},{"location":"#attr_list-html-attributes","text":"Add html attributes to elements: This is a paragraph. {: #an_id .a_class } This is a paragraph.","title":"Attr_list (HTML Attributes)"},{"location":"#def_list-definition-lists","text":"Apple : Pomaceous fruit of plants of the genus Malus in the family Rosaceae. Apple Pomaceous fruit of plants of the genus Malus in the family Rosaceae.","title":"Def_list (Definition Lists)"},{"location":"#footnotes","text":"Footnotes[^1] have a label[^@#$%] and the footnote's content. [^1]: This is a footnote content. [^@#$%]: A footnote on the label: \"@#$%\". Footnotes 1 have a label 2 and the footnote\u2019s content.","title":"Footnotes"},{"location":"#meta","text":"Overwrite the page title with front matter at top: --- title: Lorem ipsum dolor sit amet ---","title":"Meta"},{"location":"#toc","text":"Is used to make a table of contents and to add permalinks to headings.","title":"Toc"},{"location":"#smartypants","text":"The SmartyPants extension converts ASCII dashes, quotes and ellipses to their HTML entity equivalents: ... \"test\" 'test' <<test>> \u2026 \u201ctest\u201d \u2018test\u2019 \u00abtest\u00bb","title":"Smartypants"},{"location":"#pymdown-extensions","text":"Showcase for enabled PyMdown extensions .","title":"PyMdown Extensions"},{"location":"#details","text":"Collapsible elements that hide their content. See #admonition for valid classes, it is actually the same just collapsible. ???+ note \"Open styled details\" ??? danger \"Nested details!\" And more content again. ??? success Content. ??? warning classes Content. Open styled details Nested details! And more content again. Success Content. Warning Content.","title":"Details"},{"location":"#highlight","text":"Highlight is an extension that adds support for code highlighting.","title":"Highlight"},{"location":"#inlinehilite","text":"Here is some code `#!py3 import pymdownx; pymdownx.__version__`. The mock shebang will be treated like text here: `#!js var test = 0;`. Here is some code import pymdownx ; pymdownx . __version__ . The mock shebang will be treated like text here: var test = 0 ; .","title":"Inlinehilite"},{"location":"#magiclink","text":"Makes it easy to set links and converts them: https://google.com fake.email@email.com test #1 backrefs#1 Python-Markdown/markdown#1 gitlab:pycqa/flake8#385 !13 backrefs!4 Python-Markdown/markdown!598 gitlab:pycqa/flake8!213 @facelessuser @twitter:twitter https://google.com fake.email@email.com test #1 backrefs#1 Python-Markdown/markdown#1 pycqa/flake8#385 !13 backrefs!4 Python-Markdown/markdown!598 pycqa/flake8!213 @facelessuser @twitter :twitter","title":"Magiclink"},{"location":"#saneheaders","text":"Used to make headers without a space not be headers: ##test","title":"Saneheaders"},{"location":"#smartsymbols","text":"SmartSymbols adds syntax for creating special characters such as trademarks, arrows, fractions, etc. --> 1/4 (c) \u2192 \u00bc \u00a9","title":"Smartsymbols"},{"location":"#snippets","text":"Lets you include other files.","title":"Snippets"},{"location":"#superfences","text":"Allowing the nesting of fences under blockquotes, lists, or other block elements (see Limitations for more info). Ability to specify custom fences to provide features like flowcharts, sequence diagrams, or other custom blocks. Allow disabling of indented code blocks in favor of only using the fenced variant (off by default). > ``` a fenced block > with blank lines ``` ```{.python .extra-class linenums=\"1\"} import hello_world > ``` a fenced block > with blank lines ``` ```{.python .extra-class linenums=\"1\"} import hello_world","title":"Superfences"},{"location":"#tabbed","text":"=== \"Tab 1\" Markdown **content**. Multiple paragraphs. === \"Tab 2\" More Markdown **content**. - list item a - list item b Tab 1 echo $PATH Markdown content . Multiple paragraphs. Tab 2 More Markdown content . list item a list item b","title":"Tabbed"},{"location":"#tasklist","text":"- [X] item 1 * [X] item A * [ ] item B more text + [x] item a + [ ] item b + [x] item c * [X] item C - [ ] item 2 - [ ] item 3 item 1 item A item B more text item a item b item c item C item 2 item 3 This is a footnote content. \u21a9 A footnote on the label: \u201c@#$%\u201d. \u21a9","title":"Tasklist"},{"location":"changelog/","text":"Changelog \u00b6 x.x.x (xx-xx-2020) \u00b6 Breaking Changes \u00b6 Features \u00b6 Bugfixes \u00b6","title":"Changelog"},{"location":"changelog/#changelog","text":"","title":"Changelog"},{"location":"changelog/#xxx-xx-xx-2020","text":"","title":"x.x.x (xx-xx-2020)"},{"location":"changelog/#breaking-changes","text":"","title":"Breaking Changes"},{"location":"changelog/#features","text":"","title":"Features"},{"location":"changelog/#bugfixes","text":"","title":"Bugfixes"},{"location":"contributing/","text":"Contributing \u00b6 Bugs, Improvements and new Features \u00b6 Go to Issues and make a new issue. Make sure to: Check that the issue has not already been reported (open and closed ones). Check that the issue is not part of an active pull request. Pull Requests \u00b6 Cool that you want to contribute your code :-) Remember to: Include only one feature in a pull request. Open an issue and mention/reference your planned pull request. Add/update tests if needed. The tests must pass (see Testing ). Update README.org if needed. Update the documentation if needed (see Documentation ) Update CHANGELOG.org . Testing \u00b6 Uses makem.sh for linting and running the tests. The tests are written with buttercup . After pushing a GitHub action is triggered to automatically lint and run tests. The outcome can be seen on the Actions page. Lint & run tests \u00b6 To lint the package and run the tests locally from the command line you can use the Makefile targets or call makem.sh directly. To run Emacs with an empty configuration and not use your local emacs configuration it is best to use the sandbox mechanism provided by makem.sh. For convenience there are some additional make targets for linting and testing. Make sure to build the sandbox before running the tests and to rebuild it if the dependencies or the emacs version have changed. The main targets are: Target Description sandbox-build Creates the sandbox directory and installs the dependencies and linters in the sandbox. sandbox-clean Removes the sandbox directory. sandbox-rebuild Runs sandbox-clean and then sandbox-build . sandbox-all Run the tests and lint the package in the sandbox. sandbox-lint Lint in the sandbox. sandbox-test Run the tests in the sandbox. sandbox-interactive Load the packages in the sandbox and launch Emacs (GUI). There are additional targets for linting to be able to call the linters separately (those linters except elsa are all run with sandbox-lint ): Target Description sandbox-lint-checkdoc Run checkdoc. Checks for style errors. sandbox-lint-compile Byte-compile source files with warnings as errors. sandbox-lint-declare Run check-declare. sandbox-lint-elsa Run Elsa (not included in \u201clint\u201d rule). sandbox-lint-indent Lint indentation. sandbox-lint-package Run package-lint, a linting library for elisp package metadata sandbox-lint-regexps Relint scans elisp files for mistakes in regexps. To increase the verbosity add v=v or v=vv before or after the target like make v=vv sandbox-all . Documentation \u00b6 The files to build the documentation are stored in the docs folder. The settings for the documentation can be found in mkdocs.yml . Files \u00b6 The documentation has the following files: File Content index.md The homepage of the package describe its purpose and includes a description of the main features. installation.md Instructions on how to install the package. usage.md Description on how to use the package including customization (variables and faces) and key bindings. changelog.md The changelog of the package. contributing.md The guidelines for contributing. Building the Documentation \u00b6 The documentation is automatically built and pushed to the gh-pages branch with mkdocs-material and a GitHub Action when the master branch is updated. To preview the documentation locally install the dependencies: pip3 install mkdocs-material pip3 install mkdocs-minify-plugin pip3 install mkdocs-git-revision-date-localized-plugin Then run a local server with mkdocs serve at http://localhost:8000/ . The documentation will be built and live reloading is started. Upon any changes the documentation is automatically rebuilt and the page is reloaded. Taking Svg-Screenshots \u00b6 If you have build Emacs with Cairo support (check variable system-configuration-features ) you can take vector screenshots of your Emacs to use for the documentation. The Cairo flag is not on by default when building from source. ( defun my-emacs-screenshot-svg () \"Save a screenshot of the current frame as an SVG image. Saves to a temp file and puts the filename in the kill ring.\" ( interactive ) ( let* (( filename ( make-temp-file \"emacs-screenshot\" nil \".svg\" )) ( data ( x-export-frames nil 'svg ))) ( with-temp-file filename ( insert data )) ( kill-new filename ) ( message filename )))","title":"Contributing"},{"location":"contributing/#contributing","text":"","title":"Contributing"},{"location":"contributing/#bugs-improvements-and-new-features","text":"Go to Issues and make a new issue. Make sure to: Check that the issue has not already been reported (open and closed ones). Check that the issue is not part of an active pull request.","title":"Bugs, Improvements and new Features"},{"location":"contributing/#pull-requests","text":"Cool that you want to contribute your code :-) Remember to: Include only one feature in a pull request. Open an issue and mention/reference your planned pull request. Add/update tests if needed. The tests must pass (see Testing ). Update README.org if needed. Update the documentation if needed (see Documentation ) Update CHANGELOG.org .","title":"Pull Requests"},{"location":"contributing/#testing","text":"Uses makem.sh for linting and running the tests. The tests are written with buttercup . After pushing a GitHub action is triggered to automatically lint and run tests. The outcome can be seen on the Actions page.","title":"Testing"},{"location":"contributing/#lint-run-tests","text":"To lint the package and run the tests locally from the command line you can use the Makefile targets or call makem.sh directly. To run Emacs with an empty configuration and not use your local emacs configuration it is best to use the sandbox mechanism provided by makem.sh. For convenience there are some additional make targets for linting and testing. Make sure to build the sandbox before running the tests and to rebuild it if the dependencies or the emacs version have changed. The main targets are: Target Description sandbox-build Creates the sandbox directory and installs the dependencies and linters in the sandbox. sandbox-clean Removes the sandbox directory. sandbox-rebuild Runs sandbox-clean and then sandbox-build . sandbox-all Run the tests and lint the package in the sandbox. sandbox-lint Lint in the sandbox. sandbox-test Run the tests in the sandbox. sandbox-interactive Load the packages in the sandbox and launch Emacs (GUI). There are additional targets for linting to be able to call the linters separately (those linters except elsa are all run with sandbox-lint ): Target Description sandbox-lint-checkdoc Run checkdoc. Checks for style errors. sandbox-lint-compile Byte-compile source files with warnings as errors. sandbox-lint-declare Run check-declare. sandbox-lint-elsa Run Elsa (not included in \u201clint\u201d rule). sandbox-lint-indent Lint indentation. sandbox-lint-package Run package-lint, a linting library for elisp package metadata sandbox-lint-regexps Relint scans elisp files for mistakes in regexps. To increase the verbosity add v=v or v=vv before or after the target like make v=vv sandbox-all .","title":"Lint &amp; run tests"},{"location":"contributing/#documentation","text":"The files to build the documentation are stored in the docs folder. The settings for the documentation can be found in mkdocs.yml .","title":"Documentation"},{"location":"contributing/#files","text":"The documentation has the following files: File Content index.md The homepage of the package describe its purpose and includes a description of the main features. installation.md Instructions on how to install the package. usage.md Description on how to use the package including customization (variables and faces) and key bindings. changelog.md The changelog of the package. contributing.md The guidelines for contributing.","title":"Files"},{"location":"contributing/#building-the-documentation","text":"The documentation is automatically built and pushed to the gh-pages branch with mkdocs-material and a GitHub Action when the master branch is updated. To preview the documentation locally install the dependencies: pip3 install mkdocs-material pip3 install mkdocs-minify-plugin pip3 install mkdocs-git-revision-date-localized-plugin Then run a local server with mkdocs serve at http://localhost:8000/ . The documentation will be built and live reloading is started. Upon any changes the documentation is automatically rebuilt and the page is reloaded.","title":"Building the Documentation"},{"location":"contributing/#taking-svg-screenshots","text":"If you have build Emacs with Cairo support (check variable system-configuration-features ) you can take vector screenshots of your Emacs to use for the documentation. The Cairo flag is not on by default when building from source. ( defun my-emacs-screenshot-svg () \"Save a screenshot of the current frame as an SVG image. Saves to a temp file and puts the filename in the kill ring.\" ( interactive ) ( let* (( filename ( make-temp-file \"emacs-screenshot\" nil \".svg\" )) ( data ( x-export-frames nil 'svg ))) ( with-temp-file filename ( insert data )) ( kill-new filename ) ( message filename )))","title":"Taking Svg-Screenshots"},{"location":"installation/","text":"Installation \u00b6 From Melpa \u00b6 Install the package from MELPA with for instance use-package : ( use-package {{{pgk-name}}} :ensure t :defer t :hook ( ... ) :init ;; Customization ( setq ;; ... )) From Github \u00b6 You can install the package from github with for instance use-package , quelpa and quelpa-use-package as follows: ( use-package {{{pgk-name}}} :ensure nil :defer t :quelpa ( {{{pgk-name}}} :fetcher github :repo \"...\" ) :hook ( ... ) :init ;; Customization ( setq ;; ... ))","title":"Installation"},{"location":"installation/#installation","text":"","title":"Installation"},{"location":"installation/#from-melpa","text":"Install the package from MELPA with for instance use-package : ( use-package {{{pgk-name}}} :ensure t :defer t :hook ( ... ) :init ;; Customization ( setq ;; ... ))","title":"From Melpa"},{"location":"installation/#from-github","text":"You can install the package from github with for instance use-package , quelpa and quelpa-use-package as follows: ( use-package {{{pgk-name}}} :ensure nil :defer t :quelpa ( {{{pgk-name}}} :fetcher github :repo \"...\" ) :hook ( ... ) :init ;; Customization ( setq ;; ... ))","title":"From Github"},{"location":"usage/","text":"Usage \u00b6 Customization \u00b6 Variables \u00b6 Set the following variables to change the behaviour of the package: Variable Default Description Faces \u00b6 The following faces are defined: Face Description Key Bindings \u00b6 Key Action Description Hydra \u00b6","title":"Usage"},{"location":"usage/#usage","text":"","title":"Usage"},{"location":"usage/#customization","text":"","title":"Customization"},{"location":"usage/#variables","text":"Set the following variables to change the behaviour of the package: Variable Default Description","title":"Variables"},{"location":"usage/#faces","text":"The following faces are defined: Face Description","title":"Faces"},{"location":"usage/#key-bindings","text":"Key Action Description","title":"Key Bindings"},{"location":"usage/#hydra","text":"","title":"Hydra"}]}